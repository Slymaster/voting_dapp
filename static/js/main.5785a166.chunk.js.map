{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","workflowStatus","accounts","contract","ownerAddress","isRegisteredVoter","proposals","winner","state","setState","inputRef","useRef","setEventValue","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","getWorkflowStatus","call","status","owner","alert","error","s","handleSubmit","e","preventDefault","value","current","addVoter","send","from","addProposal","id","document","querySelector","setVote","handleChangeStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","handleChange","target","slice","isOwner","isVoter","getVoter","voter","isRegistered","ColoredLine","color","style","backgroundColor","height","getProposals","result","getWinner","description","className","onSubmit","type","ref","placeholder","onChange","onClick","length","map","element","i","name","key","for","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5785a166.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component, useEffect, useState, useRef } from 'react';\nimport VotingContract from \"./contracts/Voting.json\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = useState({ workflowStatus: null, web3: null, accounts: null, contract: null, ownerAddress: null, isRegisteredVoter: null, proposals: [], winner: null });\n  const inputRef = useRef();\n  const [setEventValue, setSetEventValue] = useState (0)\n\n  let arrayWorkflowStatus = [\n    'Registering voters',\n    'Proposals registration started',\n    'Proposals registration ended',\n    'Voting session started',\n    'Voting session ended',\n    'Votes tallied'\n  ];\n\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        let status = await instance.methods.getWorkflowStatus().call();\n        const address = await instance.methods.owner().call();\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ workflowStatus: status, web3: web3, accounts: accounts, contract: instance, ownerAddress: address, isRegisteredVoter: null, proposals: [], winner: null });\n\n\n      /*  await instance.events.SetEvent()\n          .on('data', event => {\n            let value = event.returnValues.value;\n            console.log(value);\n            setSetEventValue(value);\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n*/\n          \n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    setState(s => ({...s, workflowStatus: setEventValue}))\n  }, [setEventValue])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { accounts, contract } = state;\n    let value;\n    switch (state.workflowStatus) {\n      case '0':\n        value = inputRef.current.value;\n        await contract.methods.addVoter(value).send({ from: accounts[0] });\n        break;\n      case '1':\n        value = inputRef.current.value;\n        await contract.methods.addProposal(value).send({ from: accounts[0] });\n        break;\n      case '3':\n        let id = document.querySelector('input[name=\"vote\"]:checked').id\n        await contract.methods.setVote(id).send({ from: accounts[0] });\n        break;\n    }\n  }\n\n  const handleChangeStatus = async (e) => {\n    const { accounts, contract } = state;\n    switch(state.workflowStatus) {\n      case '0':\n        await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n        setState(s => ({...s, workflowStatus: '1'}))\n        break;\n      case '1':\n        await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n        setState(s => ({...s, workflowStatus: '2'}))\n        break;\n      case '2':\n        await contract.methods.startVotingSession().send({ from: accounts[0] });\n        setState(s => ({...s, workflowStatus: '3'}))\n        break;\n      case '3':\n        await contract.methods.endVotingSession().send({ from: accounts[0] });\n        setState(s => ({...s, workflowStatus: '4'}))\n        break;\n      case '4':\n        await contract.methods.tallyVotes().send({ from: accounts[0] });\n        setState(s => ({...s, workflowStatus: '5'}))\n        break;\n    }\n  }\n\n\n\n  const handleChange = (e) => {\n    if (e.target.value < 0) {\n      e.target.value = e.target.value.slice(0, 0);\n    }\n  }\n\n  if (!state.web3) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  function isOwner() {\n    return state.accounts[0] === state.ownerAddress;\n  }\n\n  const isVoter = async (e) => {\n    const { accounts, contract } = state;\n    let voter = await contract.methods.getVoter(state.accounts[0]).call({ from: accounts[0] });\n    setState(s => ({...s, isRegisteredVoter: voter.isRegistered}))\n  }\n\n        // Start voters registration\n        function showVotersRegistration() {\n          return ( \n          <div className=\"votersRegistration\">\n          { isOwner() ?\n            <form onSubmit={handleSubmit}>\n              <label>\n                  <input type=\"text\" ref={inputRef} value={state.value} placeholder=\"0x000000000000000000000000000000000000dead\" onChange={handleChange} />\n              </label>\n            <input type=\"submit\" value=\"Send address for white list\" />\n            </form> \n            : null }\n            {isOwner() ? <input onClick={handleChangeStatus} type=\"submit\" value=\"Start proposals registration\" className=\"button\" /> : null}\n          </div>\n          );\n        }\n\n        // Start proposals\n        function showStartProposals() {\n          isVoter();\n          return (\n          <div className=\"startProposals\">\n            {state.isRegisteredVoter ?\n            <form onSubmit={handleSubmit}>\n              <label>\n                  <input type=\"text\" ref={inputRef} value={state.value} placeholder=\"Proposal\" onChange={handleChange} />\n              </label>\n            <input type=\"submit\" value=\"Send proposal\" />\n            </form>\n            : null}\n            {isOwner() ? <input onClick={handleChangeStatus} type=\"submit\" value=\"End proposals registration\" className=\"button\" /> : null}\n          </div>\n          );\n        }\n\n        // End proposals\n        function showEndProposals() {\n          return (\n          <div className=\"endProposals\">\n            {isOwner() ? <input onClick={handleChangeStatus} type=\"submit\" value=\"Start voting session\" className=\"button\" /> : null}\n          </div>\n          );\n        }\n\n        const ColoredLine = ({ color }) => (\n          <hr\n              style={{\n                  color: color,\n                  backgroundColor: color,\n                  height: 5\n              }}\n          />\n      );\n\n      function onChange(value) {\n        console.log(value);\n      }\n        \n        const getProposals = async (e) => {\n          const { accounts, contract } = state;\n          const result = await contract.methods.getProposals().call({ from: accounts[0] });\n          setState(s => ({...s, proposals: result}))\n        }\n\n        function showStartVotingSession() {\n          return (\n          <div className=\"startVotingSession\">\n            {state.proposals.length === 0 && state.isRegisteredVoter ? <input onClick={getProposals} type=\"submit\" value=\"Show me proposals\" className=\"button\" /> : null }\n            <ColoredLine color=\"blue\" />\n            <form onSubmit={handleSubmit}>\n            {\n              state.proposals.map((element,i) => {\n                return(\n                <div>\n                  <input type=\"radio\" name=\"vote\" value={element.description} id={i} key={i} />\n                  <label for=\"{i}\">{element.description}</label>\n                </div>\n                );\n              })\n            }\n            {state.proposals.length > 0 ? <input value=\"Send vote\" type=\"submit\" className=\"button\" /> : null }\n            </form>\n            {isOwner() ? <input onClick={handleChangeStatus} type=\"submit\" value=\"End voting session\" className=\"button\" /> : null}\n          </div>\n          );\n        }\n\n        function showEndVotingSession() {\n          return (\n          <div className=\"startVotesTallied\">\n            {isOwner() ? <input onClick={handleChangeStatus} value=\"Tallied the votes\" type=\"submit\" className=\"button\" /> : null}\n          </div>\n          );\n        }\n\n        const getWinner = async (e) => {\n          const { contract } = state;\n          let winner = await contract.methods.getWinner().call();\n          console.log(winner);\n          setState(s => ({...s, winner: winner.description + ' 🏆'}))\n        }\n\n        function showWinner() {\n          return (\n          <div className=\"startVotesTallied\">\n            <input onClick={getWinner} value=\"Get winner\" type=\"submit\" className=\"button\" />\n            <p>The winner is : {state.winner}</p>\n          </div>\n          );\n        }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Voting</h1>    \n      <p>Status : <i>{arrayWorkflowStatus[state.workflowStatus]}</i></p>\n      <p>Owner: {state.ownerAddress}</p>\n      {\n        {\n          '0': showVotersRegistration(),\n          '1': showStartProposals(),\n          '2': showEndProposals(),\n          '3': showStartVotingSession(),\n          '4': showEndVotingSession(),\n          '5': showWinner()\n        }[state.workflowStatus]\n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}